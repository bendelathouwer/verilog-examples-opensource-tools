
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 7f5c73d58fd732a96e480083896cd73c722849ba (Fomu build) (git sha1 66613d5, x86_64-w64-mingw32-g++ 7.3-win32 -Os)


-- Parsing `buttoncounter.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: buttoncounter.v
Parsing Verilog input from `buttoncounter.v' to AST representation.
Generating RTLIL representation for module `\buttoncounter'.
Successfully finished Verilog frontend.

-- Running command `synth_ice40 -top buttoncounter -json buttoncounter.json' --

2. Executing SYNTH_ICE40 pass.

2.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

2.2. Executing HIERARCHY pass (managing design hierarchy).

2.2.1. Analyzing design hierarchy..
Top module:  \buttoncounter

2.2.2. Analyzing design hierarchy..
Top module:  \buttoncounter
Removed 0 unused modules.

2.3. Executing PROC pass (convert processes to netlists).

2.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$buttoncounter.v:7$1 in module buttoncounter.
Removed a total of 0 dead cases.

2.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

2.3.4. Executing PROC_INIT pass (extract init attributes).

2.3.5. Executing PROC_ARST pass (detect async resets in processes).

2.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\buttoncounter.$proc$buttoncounter.v:7$1'.
     1/2: $0\display[6:0]
     2/2: $0\counter[14:0]

2.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

2.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\buttoncounter.\display' using process `\buttoncounter.$proc$buttoncounter.v:7$1'.
  created $dff cell `$procdff$366' with positive edge clock.
Creating register for signal `\buttoncounter.\counter' using process `\buttoncounter.$proc$buttoncounter.v:7$1'.
  created $dff cell `$procdff$367' with positive edge clock.

2.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\buttoncounter.$proc$buttoncounter.v:7$1'.
Removing empty process `buttoncounter.$proc$buttoncounter.v:7$1'.
Cleaned up 3 empty switches.

2.4. Executing FLATTEN pass (flatten design).
No more expansions possible.

2.5. Executing TRIBUF pass.

2.6. Executing DEMINOUT pass (demote inout ports to input or output).

2.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.
<suppressed ~2 debug messages>

2.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..
Removed 0 unused cells and 5 unused wires.
<suppressed ~1 debug messages>

2.9. Executing CHECK pass (checking for obvious problems).
checking module buttoncounter..
found and reported 0 problems.

2.10. Executing OPT pass (performing simple optimizations).

2.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

2.10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttoncounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttoncounter.
Performed a total of 0 changes.

2.10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.10.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

2.10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.10.9. Finished OPT passes. (There is nothing left to do.)

2.11. Executing WREDUCE pass (reducing word size of cells).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$eq$buttoncounter.v:13$4 ($eq).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$procmux$348_CMP0 ($eq).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$procmux$349_CMP0 ($eq).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$procmux$350_CMP0 ($eq).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$procmux$351_CMP0 ($eq).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$procmux$352_CMP0 ($eq).
Removed top 11 bits (of 15) from port B of cell buttoncounter.$procmux$353_CMP0 ($eq).
Removed top 12 bits (of 15) from port B of cell buttoncounter.$procmux$354_CMP0 ($eq).
Removed top 12 bits (of 15) from port B of cell buttoncounter.$procmux$355_CMP0 ($eq).
Removed top 12 bits (of 15) from port B of cell buttoncounter.$procmux$356_CMP0 ($eq).
Removed top 12 bits (of 15) from port B of cell buttoncounter.$procmux$357_CMP0 ($eq).
Removed top 13 bits (of 15) from port B of cell buttoncounter.$procmux$358_CMP0 ($eq).
Removed top 13 bits (of 15) from port B of cell buttoncounter.$procmux$359_CMP0 ($eq).
Removed top 14 bits (of 15) from port B of cell buttoncounter.$procmux$360_CMP0 ($eq).

2.12. Executing PEEPOPT pass (run peephole optimizers).

2.13. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.14. Executing SHARE pass (SAT-based resource sharing).

2.15. Executing TECHMAP pass (map to technology primitives).

2.15.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/cmp2lut.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.15.2. Continuing TECHMAP pass.
No more expansions possible.

2.16. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.18. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module buttoncounter:
  creating $macc model for $add$buttoncounter.v:11$3 ($add).
  creating $alu model for $macc $add$buttoncounter.v:11$3.
  creating $alu cell for $add$buttoncounter.v:11$3: $auto$alumacc.cc:485:replace_alu$368
  created 1 $alu and 0 $macc cells.

2.19. Executing OPT pass (performing simple optimizations).

2.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttoncounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttoncounter.
Performed a total of 0 changes.

2.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.19.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.19.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.19.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.19.9. Finished OPT passes. (There is nothing left to do.)

2.20. Executing FSM pass (extract and optimize FSM).

2.20.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking buttoncounter.display as FSM state register:
    Register is connected to module port.
    Users of register don't seem to benefit from recoding.

2.20.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.20.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.20.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.20.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.20.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.20.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.21. Executing OPT pass (performing simple optimizations).

2.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.21.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.21.5. Finished fast OPT passes.

2.22. Executing MEMORY pass.

2.22.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.22.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

2.22.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.22.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.22.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.22.6. Executing MEMORY_COLLECT pass (generating $mem cells).

2.23. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.24. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

2.25. Executing TECHMAP pass (map to technology primitives).

2.25.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/brams_map.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

2.25.2. Continuing TECHMAP pass.
No more expansions possible.

2.26. Executing ICE40_BRAMINIT pass.

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.27.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \buttoncounter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \buttoncounter.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.29.6. Executing OPT_RMDFF pass (remove dff with constant values).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing ICE40_WRAPCARRY pass (wrap carries).

2.31. Executing TECHMAP pass (map to technology primitives).

2.31.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.31.2. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/arith_map.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

2.31.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=15\Y_WIDTH=15 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~82 debug messages>

2.32. Executing OPT pass (performing simple optimizations).

2.32.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.
<suppressed ~399 debug messages>

2.32.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
<suppressed ~552 debug messages>
Removed a total of 184 cells.

2.32.3. Executing OPT_RMDFF pass (remove dff with constant values).

2.32.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..
Removed 15 unused cells and 112 unused wires.
<suppressed ~16 debug messages>

2.32.5. Finished fast OPT passes.

2.33. Executing ICE40_OPT pass (performing simple optimizations).

2.33.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) buttoncounter.$auto$alumacc.cc:485:replace_alu$368.slice[0].carry: CO=\counter [0]

2.33.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.33.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.33.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.33.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.33.6. Rerunning OPT passes. (Removed registers in this run.)

2.33.7. Running ICE40 specific optimizations.

2.33.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.33.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.33.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.33.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.33.12. Finished OPT passes. (There is nothing left to do.)

2.34. Executing DFFSR2DFF pass (mapping DFFSR cells to simpler FFs).

2.35. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module buttoncounter:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1049 to $_DFFE_PP_ for $0\counter[14:0] [0] -> \counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1050 to $_DFFE_PP_ for $0\counter[14:0] [1] -> \counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1051 to $_DFFE_PP_ for $0\counter[14:0] [2] -> \counter [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1052 to $_DFFE_PP_ for $0\counter[14:0] [3] -> \counter [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1053 to $_DFFE_PP_ for $0\counter[14:0] [4] -> \counter [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1054 to $_DFFE_PP_ for $0\counter[14:0] [5] -> \counter [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1055 to $_DFFE_PP_ for $0\counter[14:0] [6] -> \counter [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1056 to $_DFFE_PP_ for $0\counter[14:0] [7] -> \counter [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1057 to $_DFFE_PP_ for $0\counter[14:0] [8] -> \counter [8].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1058 to $_DFFE_PP_ for $0\counter[14:0] [9] -> \counter [9].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1059 to $_DFFE_PP_ for $0\counter[14:0] [10] -> \counter [10].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1060 to $_DFFE_PP_ for $0\counter[14:0] [11] -> \counter [11].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1061 to $_DFFE_PP_ for $0\counter[14:0] [12] -> \counter [12].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1062 to $_DFFE_PP_ for $0\counter[14:0] [13] -> \counter [13].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1063 to $_DFFE_PP_ for $0\counter[14:0] [14] -> \counter [14].

2.36. Executing TECHMAP pass (map to technology primitives).

2.36.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_map.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.36.2. Continuing TECHMAP pass.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
No more expansions possible.
<suppressed ~22 debug messages>

2.37. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.
<suppressed ~30 debug messages>

2.38. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping buttoncounter.$auto$alumacc.cc:485:replace_alu$368.slice[0].carry ($lut).

2.39. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in buttoncounter.

2.40. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in buttoncounter.
  Merging $auto$simplemap.cc:277:simplemap_mux$1041 (A=1'0, B=$add$buttoncounter.v:11$3_Y [14], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1063 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1027 (A=1'0, B=$auto$simplemap.cc:309:simplemap_lut$1549, S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1049 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1296 (A=1'1, B=$procmux$346.Y_B [1], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1043 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1297 (A=1'1, B=$procmux$346.Y_B [2], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1044 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1298 (A=1'1, B=$procmux$346.Y_B [3], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1045 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1299 (A=1'1, B=$procmux$346.Y_B [4], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1046 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1300 (A=1'1, B=$procmux$346.Y_B [5], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1047 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1295 (A=1'1, B=$procmux$346.Y_B [0], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1042 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1301 (A=1'1, B=$procmux$346.Y_B [6], S=$techmap$procmux$346.$reduce_or$D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/techmap.v:480$459_Y) into $auto$simplemap.cc:420:simplemap_dff$1048 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1028 (A=1'0, B=$add$buttoncounter.v:11$3_Y [1], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1050 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1029 (A=1'0, B=$add$buttoncounter.v:11$3_Y [2], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1051 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1030 (A=1'0, B=$add$buttoncounter.v:11$3_Y [3], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1052 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1031 (A=1'0, B=$add$buttoncounter.v:11$3_Y [4], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1053 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1032 (A=1'0, B=$add$buttoncounter.v:11$3_Y [5], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1054 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1033 (A=1'0, B=$add$buttoncounter.v:11$3_Y [6], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1055 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1034 (A=1'0, B=$add$buttoncounter.v:11$3_Y [7], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1056 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1035 (A=1'0, B=$add$buttoncounter.v:11$3_Y [8], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1057 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1036 (A=1'0, B=$add$buttoncounter.v:11$3_Y [9], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1058 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1037 (A=1'0, B=$add$buttoncounter.v:11$3_Y [10], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1059 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1038 (A=1'0, B=$add$buttoncounter.v:11$3_Y [11], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1060 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1039 (A=1'0, B=$add$buttoncounter.v:11$3_Y [12], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1061 (SB_DFFE).
  Merging $auto$simplemap.cc:277:simplemap_mux$1040 (A=1'0, B=$add$buttoncounter.v:11$3_Y [13], S=$auto$simplemap.cc:256:simplemap_eqne$437) into $auto$simplemap.cc:420:simplemap_dff$1062 (SB_DFFE).

2.41. Executing ICE40_OPT pass (performing simple optimizations).

2.41.1. Running ICE40 specific optimizations.

2.41.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.
<suppressed ~29 debug messages>

2.41.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
<suppressed ~147 debug messages>
Removed a total of 49 cells.

2.41.4. Executing OPT_RMDFF pass (remove dff with constant values).

2.41.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..
Removed 22 unused cells and 151 unused wires.
<suppressed ~23 debug messages>

2.41.6. Rerunning OPT passes. (Removed registers in this run.)

2.41.7. Running ICE40 specific optimizations.

2.41.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module buttoncounter.

2.41.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\buttoncounter'.
Removed a total of 0 cells.

2.41.10. Executing OPT_RMDFF pass (remove dff with constant values).

2.41.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \buttoncounter..

2.41.12. Finished OPT passes. (There is nothing left to do.)

2.42. Executing TECHMAP pass (map to technology primitives).

2.42.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/latches_map.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

2.42.2. Continuing TECHMAP pass.
No more expansions possible.

2.43. Executing ABC pass (technology mapping using ABC).

2.43.1. Extracting gate netlist of module `\buttoncounter' to `<abc-temp-dir>/input.blif'..
Extracted 118 gates and 135 wires to a netlist network with 16 inputs and 11 outputs.

2.43.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       8.
ABC: Participating nodes from both networks       =      18.
ABC: Participating nodes from the first network   =       7. (  18.92 % of nodes)
ABC: Participating nodes from the second network  =      11. (  29.73 % of nodes)
ABC: Node pairs (any polarity)                    =       7. (  18.92 % of names can be moved)
ABC: Node pairs (same polarity)                   =       5. (  13.51 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

2.43.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       36
ABC RESULTS:        internal signals:      108
ABC RESULTS:           input signals:       16
ABC RESULTS:          output signals:       11
Removing temp directory.

2.44. Executing ICE40_WRAPCARRY pass (wrap carries).

2.45. Executing TECHMAP pass (map to technology primitives).

2.45.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_map.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

2.45.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 1 unused cells and 97 unused wires.

2.46. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       50
  1-LUT                1
  2-LUT               21
  3-LUT                8
  4-LUT               20

Eliminating LUTs.
Number of LUTs:       50
  1-LUT                1
  2-LUT               21
  3-LUT                8
  4-LUT               20

Combining LUTs.
Number of LUTs:       50
  1-LUT                1
  2-LUT               21
  3-LUT                8
  4-LUT               20

Eliminated 0 LUTs.
Combined 0 LUTs.
<suppressed ~136 debug messages>

2.47. Executing TECHMAP pass (map to technology primitives).

2.47.1. Executing Verilog-2005 frontend: D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_map.v
Parsing Verilog input from `D:\fomu-toolchain-windows-v1.5.6\bin\../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

2.47.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1011000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000011101110111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111011111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0111 for cells of type $lut.
No more expansions possible.
<suppressed ~362 debug messages>
Removed 0 unused cells and 100 unused wires.

2.48. Executing AUTONAME pass.
Renamed 620 objects in module buttoncounter (16 iterations).
<suppressed ~123 debug messages>

2.49. Executing HIERARCHY pass (managing design hierarchy).

2.49.1. Analyzing design hierarchy..
Top module:  \buttoncounter

2.49.2. Analyzing design hierarchy..
Top module:  \buttoncounter
Removed 0 unused modules.

2.50. Printing statistics.

=== buttoncounter ===

   Number of wires:                 42
   Number of wire bits:             90
   Number of public wires:          42
   Number of public wire bits:      90
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 85
     SB_CARRY                       13
     SB_DFFESR                      15
     SB_DFFSS                        7
     SB_LUT4                        50

2.51. Executing CHECK pass (checking for obvious problems).
checking module buttoncounter..
found and reported 0 problems.

2.52. Executing JSON backend.

End of script. Logfile hash: 79ef57bf70
Yosys 7f5c73d58fd732a96e480083896cd73c722849ba (Fomu build) (git sha1 66613d5, x86_64-w64-mingw32-g++ 7.3-win32 -Os)
Time spent: 1% 17x opt_clean (0 sec), 1% 16x opt_expr (0 sec), ...
